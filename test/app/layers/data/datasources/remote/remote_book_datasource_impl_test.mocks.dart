// Mocks generated by Mockito 5.4.3 from annotations
// in desafio_estante_de_livros/test/app/layers/data/datasources/remote/remote_book_datasource_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:desafio_estante_de_livros/core/infrastructure/network/http_client/http_client_adapter_impl.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClientAdapterImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientAdapterImpl extends _i1.Mock
    implements _i3.HttpClientAdapterImpl {
  @override
  _i2.Future<T> get<T>(String? path) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #get,
                [path],
              ),
            ),
        returnValueForMissingStub: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #get,
                [path],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<void> download({
    required String? downloadUrl,
    required String? pathDirectory,
    void Function()? onComplete,
    void Function()? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [],
          {
            #downloadUrl: downloadUrl,
            #pathDirectory: pathDirectory,
            #onComplete: onComplete,
            #onError: onError,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}
